// Generated by sprotodump. DO NOT EDIT!
// source: ../../Protos/proto.s2c.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class proto {
	
		public class s2c {
		
			public class package : SprotoTypeBase {
				private static int max_field_count = 3;
				
				
				private Int64 _type; // tag 0
				public Int64 type {
					get { return _type; }
					set { base.has_field.set_field (0, true); _type = value; }
				}
				public bool HasType {
					get { return base.has_field.has_field (0); }
				}

				private Int64 _session; // tag 1
				public Int64 session {
					get { return _session; }
					set { base.has_field.set_field (1, true); _session = value; }
				}
				public bool HasSession {
					get { return base.has_field.has_field (1); }
				}

				private string _ud; // tag 2
				public string ud {
					get { return _ud; }
					set { base.has_field.set_field (2, true); _ud = value; }
				}
				public bool HasUd {
					get { return base.has_field.has_field (2); }
				}

				public package () : base(max_field_count) {}

				public package (byte[] buffer) : base(max_field_count, buffer) {
					this.decode ();
				}

				protected override void decode () {
					int tag = -1;
					while (-1 != (tag = base.deserialize.read_tag ())) {
						switch (tag) {
						case 0:
							this.type = base.deserialize.read_integer ();
							break;
						case 1:
							this.session = base.deserialize.read_integer ();
							break;
						case 2:
							this.ud = base.deserialize.read_string ();
							break;
						default:
							base.deserialize.read_unknow_data ();
							break;
						}
					}
				}

				public override int encode (SprotoStream stream) {
					base.serialize.open (stream);

					if (base.has_field.has_field (0)) {
						base.serialize.write_integer (this.type, 0);
					}

					if (base.has_field.has_field (1)) {
						base.serialize.write_integer (this.session, 1);
					}

					if (base.has_field.has_field (2)) {
						base.serialize.write_string (this.ud, 2);
					}

					return base.serialize.close ();
				}
			}


			public class push {
			
				public class request : SprotoTypeBase {
					private static int max_field_count = 1;
					
					
					private string _text; // tag 0
					public string text {
						get { return _text; }
						set { base.has_field.set_field (0, true); _text = value; }
					}
					public bool HasText {
						get { return base.has_field.has_field (0); }
					}

					public request () : base(max_field_count) {}

					public request (byte[] buffer) : base(max_field_count, buffer) {
						this.decode ();
					}

					protected override void decode () {
						int tag = -1;
						while (-1 != (tag = base.deserialize.read_tag ())) {
							switch (tag) {
							case 0:
								this.text = base.deserialize.read_string ();
								break;
							default:
								base.deserialize.read_unknow_data ();
								break;
							}
						}
					}

					public override int encode (SprotoStream stream) {
						base.serialize.open (stream);

						if (base.has_field.has_field (0)) {
							base.serialize.write_string (this.text, 0);
						}

						return base.serialize.close ();
					}
				}


			}


		}


	}


}

